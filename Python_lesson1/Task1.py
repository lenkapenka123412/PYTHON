# Создаем новый проект
# pyton -m venv .folder (это виртуальное окружение)
# print(5) - выводит число 5 в консоль 
# (кнопка плей или сочетание Ctrl + F + 5)
# python Task.python - (запускает код из терминала)
# print(5, 8, 9) - выводит несколько значений

# Базовые типы данных
# int - целое число (123)
# float - доробное число (1,23)
# bool - булевый тип данных (True/False)
# str - строка (абв)

# Python имеет динамическую типизацию данных

# Чтобы создать переменную мы дожны дать
# ей имя и присвоить значение:

# n = 5 (имя переменной "n" и значение переменной 5)
# n = None - создаем переменную и присваеваем ей значение "None"

# Вывод типа данных в консоль
# n = 5
# prin(type(n))

# Вывод кавычки в консоли (символ /)
# n = 'nh/'jk'

# Вывод кавычек в консоль (используем двойные кавычки внутри одинарных)
# n = 'nhg"bgh"nhj'

# Вывод сложной строки - интерполяция строк
# a = 5
# b = 5.2
# c = "Строка"
# print(f"{a} - {b} - {c}")

# Вывод сложной строки - интерполяция строк второй вариант
# a = 5
# b = 5.2
# c = "Строка"
# print("{} - {} - {}".format(a,b,c))

# Функция input - это ввод данных
ф
# a = inrut() - сохраняем значение вваеденных данных в переменную a

# print("Введите число") - приглащение ко вводу

# c = 5.89
# print(c)
# n = int(c)
# print(n) - привели число к целочисленному значение

# Округление чисел
# a = 6.25895
# b = 3.256889
# print(round(a*b, 3))

# Сокращенное присваивание
# iter = 2
# iter += 3 (iter = iner + 3)
# iter -= 4 (iter = iter - 4)
# iter *= 5 (iter = iter * 5)
# iter /= 5 (iter = iter / 5)
# iter //= 2 (iter = iter // 5)
# iter %= 5 (iter = iter % 5) остаток от деления
# iter **= 5 (iter = iter ** 5) возведение в степень

# Логические операции
# > больше
# >= больше или равно
# < меньше
# <= меньше или равно
# == строгое равенство
# != не равно
# not отрицание
# and - И (коньюнкция)
# or - ИЛИ (дизьюнкция)

# while (цикл. Выполняется до тех пор пока будет верным условие)
# n = 423
# summ = 0
# while n > 0:
#   x = n % 10
#    summ
# summ + x 
#    n = n // 10
# print(summ)

# range - генерирует последовательность
# range(5) - количество элементов от 0 до числа в скобочках не включая последнее
# range(2, 5) - откуда начинаем и где заканчиваем
# range (2, 10, 3) - третий аргумент шаг
